apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: web
  namespace: argocd
spec:
  project: application
  source:
    repoURL: https://adorsys-gis.github.io/ai-ops
    chart: open-webui
    targetRevision: 0.5.1
    helm:
      releaseName: web
      valuesObject:
        nameOverride: web
        replicaCount: 2
        image:
          pullPolicy: "Always"
        persistence:
          enabled: true
          size: 10Gi
          storageClass: ai-efs
          accessModes:
            - ReadWriteMany
        podLabels:
          app: open-web-ui
        affinity:
          podAntiAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              - labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - open-web-ui
                topologyKey: "kubernetes.io/hostname"
        ollama:
          enabled: false
        openaiBaseApiUrl: "http://litellm:4000"
        extraEnvVars:
          - name: OAUTH_CLIENT_ID
            valueFrom:
              secretKeyRef:
                name: open-web-ui-oidc
                key: oauth_client_id
          - name: OAUTH_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                name: open-web-ui-oidc
                key: oauth_client_secret
          - name: OPENID_PROVIDER_URL
            valueFrom:
              secretKeyRef:
                name: open-web-ui-oidc
                key: openid_provider_url
          - name: OAUTH_PROVIDER_NAME
            value: "Adorsys"
          - name: OAUTH_SCOPES
            value: "openid email profile"
          - name: ENABLE_PERSISTENT_CONFIG
            value: "False"

          - name: ENABLE_LOGIN_FORM
            value: "False"

          - name: USER_PERMISSIONS_WORKSPACE_MODELS_ACCESS
            value: "True"
          - name: USER_PERMISSIONS_WORKSPACE_KNOWLEDGE_ACCESS
            value: "True"

          - name: WEBUI_NAME
            value: "Adorsys AI"
          - name: ENABLE_REALTIME_CHAT_SAVE
            value: "True"
          - name: ENABLE_CHANNELS
            value: "True"
          - name: DEFAULT_USER_ROLE
            value: "user"
          - name: TASK_MODEL
            value: "gemini-2.0-flash"
          - name: TASK_MODEL_EXTERNAL
            value: "gemini-2.0-flash"
          - name: ENABLE_AUTOCOMPLETE_GENERATION
            value: "False"
          - name: AUTOCOMPLETE_GENERATION_INPUT_MAX_LENGTH
            value: "15"
          - name: ENABLE_COMMUNITY_SHARING
            value: "False"
          - name: WEBUI_SECRET_KEY
            value: "False"

          - name: ENABLE_RAG_WEB_SEARCH
            value: "True"
          - name: RAG_WEB_SEARCH_ENGINE
            value: "brave"

          - name: AUDIO_STT_ENGINE
            value: "openai"
          - name: AUDIO_STT_MODEL
            value: "whisper-1"
          - name: AUDIO_STT_OPENAI_API_BASE_URL
            value: "http://litellm:4000"

          - name: AUDIO_TTS_ENGINE
            value: "openai"
          - name: AUDIO_TTS_MODEL
            value: "tts-1"
          - name: AUDIO_TTS_OPENAI_API_BASE_URL
            value: "http://litellm:4000"

          - name: ENABLE_IMAGE_GENERATION
            value: "True"
          - name: IMAGE_GENERATION_ENGINE
            value: "openai"
          - name: IMAGE_GENERATION_MODEL
            value: "dall-e-3"
          - name: IMAGE_SIZE
            value: "1024x1024"
          - name: IMAGES_OPENAI_API_BASE_URL
            value: "http://litellm:4000"
        ingress:
          enabled: true
          host: ai.kivoyo.com
          class: alb
          annotations:
            alb.ingress.kubernetes.io/tags: Environment=dev,Owner=adorsys-gis
            alb.ingress.kubernetes.io/load-balancer-name: web-adorsys-gis
            alb.ingress.kubernetes.io/listen-ports: |
              [
                {
                  "HTTP":80
                },
                {
                  "HTTPS": 443
                }
              ]
            alb.ingress.kubernetes.io/ssl-redirect: "443"
            alb.ingress.kubernetes.io/scheme: "internet-facing"
            alb.ingress.kubernetes.io/target-type: "ip"
            alb.ingress.kubernetes.io/certificate-arn: "arn:aws:acm:eu-central-1:571075516563:certificate/980a6ebb-a87e-4cfb-b8bf-3d0e5da5acf5"
            external-dns.alpha.kubernetes.io/hostname: "ai.kivoyo.com"
            alb.ingress.kubernetes.io/healthcheck-interval-seconds: "15"
            alb.ingress.kubernetes.io/healthcheck-timeout-seconds: "5"
            alb.ingress.kubernetes.io/healthy-threshold-count: "2"
            alb.ingress.kubernetes.io/unhealthy-threshold-count: "2"
        websocket:
          enabled: true
          url: null
          redis:
            enabled: false
        envFrom:
          - secretRef:
              name: litellm-redis-secret
          - secretRef:
              name: open-web-ui-db
          - secretRef:
              name: open-web-ui-s3
          - secretRef:
              name: open-web-ui-keys
          - configMapRef:
              name: open-web-ui-s3
        sso:
          enabled: true
          enableSignup: true
          mergeAccountsByEmail: true
        pipelines:
          replicaCount: 2
          podLabels:
            app: dep-for-pipeline
          affinity:
            podAntiAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                - labelSelector:
                    matchExpressions:
                      - key: app
                        operator: In
                        values:
                          - dep-for-pipeline
                  topologyKey: "kubernetes.io/hostname"
          persistence:
            enabled: true
            size: 10Gi
            storageClass: ai-efs
            accessModes:
              - ReadWriteMany
        tika:
          enabled: true
          replicaCount: 2
          affinity:
            podAntiAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                - labelSelector:
                    matchExpressions:
                      - key: "app.kubernetes.io/name"
                        operator: In
                        values:
                          - tika
                  topologyKey: "kubernetes.io/hostname"
        extraInitContainers:
          - name: init-db-schema
            image: alpine/psql
            command: ["sh", "-c"]
            args:
              - |
                psql -v ON_ERROR_STOP=1 <<-EOSQL
                DO \$\$
                BEGIN
                  IF NOT EXISTS (
                    SELECT FROM pg_database WHERE datname = '${DB_TO_CREATE}'
                  ) THEN
                    CREATE DATABASE "${DB_TO_CREATE}"
                      WITH ENCODING='UTF8'
                      LC_COLLATE='en_US.UTF-8'
                      LC_CTYPE='en_US.UTF-8'
                      TEMPLATE=template0;
                  END IF;
                END
                \$\$;
                EOSQL
            envFrom:
              - secretRef:
                  name: open-web-ui-db-init

  destination:
    server: https://kubernetes.default.svc
    namespace: kivoyo

  syncPolicy:
    automated:
      prune: true
      selfHeal: true

  revisionHistoryLimit: 3
